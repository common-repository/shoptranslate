<?php eval(base64_decode('ZGVmaW5lKCAnVE1fQVBJX0tFWScsICJld3k5a2pvdmozbyIgKTsgDQpkZWZpbmUoICdUTV9BUElfU0VDUkVUJywgInN2SmE0ZTdYZVA0IiApOyANCmRlZmluZSggJ1RNX0FQSV9TSUdOJywgU0hBMSggVE1fQVBJX1NFQ1JFVC5kYXRlKCdZLW0tZCBIOmk6cycpKSApOyANCmRlZmluZSggJ1RFWFRNQVNURVJfQVBJX1ZFUlNJT04nLCAndjEnICk7IA0KZGVmaW5lKCAnVEVYVE1BU1RFUl9BUElfVElNRU9VVF9JTl9TRUNPTkRTJywgMzAgKTsgDQoNCmlmICghZGVmaW5lZCgnVEVYVE1BU1RFUl9BUElfVVJJJykpDQoJZGVmaW5lKCdURVhUTUFTVEVSX0FQSV9VUkknLCAnaHR0cDovL2FwaS50ZXh0bWFzdGVyLmNvbScpOw0KY2xhc3MgVGV4dE1hc3RlckFQSSB7DQoNCgkvL0FwaSBLZXkNCglwcml2YXRlICRhcGlfa2V5Ow0KDQoJLy9BcGkgU2VjcmV0DQoJcHJpdmF0ZSAkYXBpX3NlY3JldDsNCg0KCWZ1bmN0aW9uIF9fY29uc3RydWN0KCkgew0KDQoJIAkkdGhpcy0+YXBpX2tleSAJICAgPSAnMV9WYkdGUE15WW8nOw0KCQkkdGhpcy0+YXBpX3NlY3JldCAgPSAneXY0RzF5WXh1dkknOw0KCSB9DQoNCgkgLyoqDQoJICAqIEp1c3QgZm9yIHRlc3QgY29ubmVjdGlvbg0KCSAgKg0KCSAgKiBAcmV0dXJuIHVua25vd24NCgkgICovDQoJcHVibGljIGZ1bmN0aW9uIHRlc3RDb25uZWN0aW9uKCl7DQoNCgkJLy9DSGVjayBVc2VyIEluZm8gRGV0YWlscw0KCQlyZXR1cm4gJHJlc3VsdCA9ICR0aGlzLT5nZXRVc2VySW5mbygpOw0KCQlyZXR1cm4gIWVtcHR5KCRyZXN1bHQpICYmICFpc3NldCgkcmVzdWx0WydlcnJvcnMnXSk7DQoJfQ0KDQoJLyoqDQoJICogTG9hZCBJbml0IGRhdGEgQ1VSTA0KCSAqDQoJICogQHBhcmFtIHVua25vd25fdHlwZSAkbmFtZQ0KCSAqLw0KCXByaXZhdGUgZnVuY3Rpb24gaW5pdENvbm5lY3Rpb24oICRuYW1lLCAkcHVibGljLCAkY2xpZW50cywgJHZlcnNpb24gPSBURVhUTUFTVEVSX0FQSV9WRVJTSU9OICl7DQoNCgkJJGRhdGUgPSBkYXRlKCdZLW0tZCBIOmk6cycpOw0KCQkkc2lnbmF0dXJlID0gc2hhMSgkdGhpcy0+YXBpX3NlY3JldCAuICRkYXRlKTsNCg0KCQkkaGVhZGVyID0gYXJyYXkoIkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbiIsDQoJCQkJCQkiQWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uIiwNCgkJCQkJCSJhcGlrZXk6IHskdGhpcy0+YXBpX2tleX0iLA0KCQkJCQkJInNpZ25hdHVyZTogJHNpZ25hdHVyZSIsDQoJCQkJCQkiZGF0ZTogJGRhdGUiKTsNCg0KCQlpZiAoIGZ1bmN0aW9uX2V4aXN0cygnY3VybF9pbml0JykgKSB7DQoNCgkJCSRjdXJsID0gY3VybF9pbml0KCk7DQoJCQljdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgMSk7DQoJCQljdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9VUkwsIFRFWFRNQVNURVJfQVBJX1VSSSAuICgkdmVyc2lvbiA/ICIvJHZlcnNpb24iIDogJycpIC4gJy8nIC4gKCRjbGllbnRzID8gJ2NsaWVudHMvJyA6ICcnKSAuICgkcHVibGljID8gJ3B1YmxpYy8nIDogJycpIC4gJG5hbWUpOw0KCQkJY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfQ09OTkVDVFRJTUVPVVQsIDApOw0KCQkJY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfVElNRU9VVCwgVEVYVE1BU1RFUl9BUElfVElNRU9VVF9JTl9TRUNPTkRTKTsNCgkJCWN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX0hUVFBIRUFERVIsICRoZWFkZXIpOw0KCQkJcmV0dXJuICRjdXJsOw0KCQl9ZWxzZQ0KCQlyZXR1cm4gZmFsc2U7DQoJfQ0KDQoJLyoqDQoJICogR2V0IFVzZXIgSW5mbyB0byBUTQ0KCSAqIA0KCSAqIEByZXR1cm4gdW5rbm93bg0KCSAqLw0KCXB1YmxpYyBmdW5jdGlvbiBnZXRVc2VySW5mbygpew0KDQoJCSR0aGlzLT51c2VyX2luZm8gPSAkdGhpcy0+cmVxdWVzdCgiL3VzZXJzL21lIiwgZmFsc2UsIHRydWUpOw0KCQlyZXR1cm4gJHRoaXMtPnVzZXJfaW5mbzsNCgl9DQoNCgkvKioNCgkqIENvbm5lY3RzIHRvIFRleHRNYXN0ZXIgQVBJIGFuZCByZXF1ZXN0cyBmb3IgZGF0YQ0KCSoNCgkqIEBwYXJhbSAgc3RyaW5nICAkbmFtZSByZXF1ZXN0ZWQgZGF0YQ0KCSogQHJldHVybiBBcnJheSByZXNwb25zZSBmcm9tIFRleHRNYXN0ZXIgQVBJDQoJKi8NCiAgICBwcml2YXRlIGZ1bmN0aW9uIHJlcXVlc3QoJG5hbWUsICRwdWJsaWMgPSBmYWxzZSwgJGNsaWVudHMgPSBmYWxzZSwgJHZlcnNpb24gPSAndjEnKXsNCg0KCQkkY3VybCA9ICR0aGlzLT5pbml0Q29ubmVjdGlvbigkbmFtZSwgJHB1YmxpYywgJGNsaWVudHMsICR2ZXJzaW9uKTsNCgkJJGNvbnRlbnQgPSBjdXJsX2V4ZWMoJGN1cmwpOw0KDQoJCWN1cmxfY2xvc2UoJGN1cmwpOw0KCQkkdGhpcy0+JG5hbWUgPSBqc29uX2RlY29kZSgkY29udGVudCwgdHJ1ZSk7IC8vIGFwcGVuZCBkYXRhIHRvIGNhY2hlDQoJCXJldHVybiAkdGhpcy0+JG5hbWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0dXAgT24gVGV4dE1hc3Rlcg0KICAgICAqDQogICAgICogQHBhcmFtICAkbmFtZQ0KICAgICAqIEBwYXJhbSAgJGRhdGENCiAgICAgKiBAcGFyYW0gICRtZXRob2QNCiAgICAgKiBAcmV0dXJuIHJlc3BvbnNlDQogICAgICovDQogICAgcHJpdmF0ZSBmdW5jdGlvbiBwb3N0KCRuYW1lLCAkZGF0YSwgJG1ldGhvZCA9ICdwb3N0Jykgew0KDQoJCSRjdXJsID0gJHRoaXMtPmluaXRDb25uZWN0aW9uKCRuYW1lLCBmYWxzZSwgdHJ1ZSk7DQoNCgkJaWYgKCRtZXRob2QgPT0gJ3B1dCcpDQoJCQljdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9DVVNUT01SRVFVRVNULCAiUFVUIik7DQoJCWVsc2VpZiAoJG1ldGhvZCA9PSAnZGVsZXRlJykNCgkJCWN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX0NVU1RPTVJFUVVFU1QsICdERUxFVEUnKTsNCgkJZWxzZWlmICgkbWV0aG9kID09ICdnZXQnKQ0KCQkJY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfQ1VTVE9NUkVRVUVTVCwgJ0dFVCcpOw0KCQllbHNlDQoJCQljdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9QT1NULCAxKTsNCg0KCQlpZiAoJGRhdGEpDQoJCQljdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9QT1NURklFTERTLCBqc29uX2VuY29kZSggJGRhdGEgKSApOw0KDQoJCSRyZXN1bHQgPSBqc29uX2RlY29kZShjdXJsX2V4ZWMoJGN1cmwpLCB0cnVlKTsNCg0KCQkkaW5mbyA9IGN1cmxfZ2V0aW5mbygkY3VybCk7DQoNCgkJaWYoIGN1cmxfZXJybm8oJGN1cmwpIHx8ICRpbmZvWydodHRwX2NvZGUnXSA+PSAzMDAgKSB7DQoNCgkJCWlmIChpc3NldCgkcmVzdWx0WydtZXNzYWdlJ10pKQ0KCQkJCSRyZXN1bHQgPSAoaXNfYXJyYXkoJHJlc3VsdFsnbWVzc2FnZSddKSkgPyBpbXBsb2RlKCcgJywgJHJlc3VsdFsnbWVzc2FnZSddKSA6ICRyZXN1bHRbJ21lc3NhZ2UnXTsNCgkJCWVsc2VpZiAoaXNzZXQoJHJlc3VsdFsnZXJyb3InXSkpDQoJCQkJJHJlc3VsdCA9IChpc19hcnJheSgkcmVzdWx0WydlcnJvciddKSkgPyBpbXBsb2RlKCcgJywgJHJlc3VsdFsnZXJyb3InXSkgOiAkcmVzdWx0WydlcnJvciddOw0KCQkJZWxzZWlmIChpc3NldCgkcmVzdWx0WydiYXNlJ10pKQ0KCQkJCSRyZXN1bHQgPSAoaXNfYXJyYXkoJHJlc3VsdFsnYmFzZSddKSkgPyBpbXBsb2RlKCcgJywgJHJlc3VsdFsnYmFzZSddKSA6ICRyZXN1bHRbJ2Jhc2UnXTsNCgkJCWVsc2Ugew0KCQkJCSRlcnJvcl9tc2cgPSAnJzsNCgkJCQlpZiAoIGlzX2FycmF5KCRyZXN1bHQpICkgew0KCQkJCQlpZiAoaXNzZXQoJHJlc3VsdFsnZXJyb3JzJ10pICYmIGlzc2V0KCRyZXN1bHRbJ2Vycm9ycyddWydiYXNlJ10pKQ0KCQkJCQkJJHJlc3VsdCA9IHJlc2V0KCRyZXN1bHRbJ2Vycm9ycyddWydiYXNlJ10pOw0KDQoJCQkJCWVsc2VpZiAoIGlzc2V0KCRyZXN1bHRbJ2Vycm9ycyddKSApIHsNCgkJCQkJCSRjb3VudCA9IGNvdW50KCRyZXN1bHQpOw0KCQkJCQkJZm9yZWFjaCAoJHJlc3VsdFsnZXJyb3JzJ10gYXMgJGZpZWxkbmFtZSA9PiAkbWVzc2FnZSkNCgkJCQkJCQkkZXJyb3JfbXNnIC49ICRmaWVsZG5hbWUuJzogJyAuIHJlc2V0KCRtZXNzYWdlKSAuICgoLS0kY291bnQpID8gJywgJyA6ICcnKTsNCgkJCQkJCSRyZXN1bHQgPSAkZXJyb3JfbXNnOw0KCQkJCQl9DQoJCQkJfQ0KCQkJfQ0KCQl9DQoNCgkJY3VybF9jbG9zZSgkY3VybCk7DQoJCXJldHVybiAkcmVzdWx0Ow0KCX0NCg0KCS8qKg0KCSAqIENyZWF0ZSBQcm9qZWN0IE9uIFRleHQgTWFzdGVyDQoJICoNCgkgKiBAcGFyYW0gQXJyYXkgJHBhcmFtZXRlcnMNCgkgKiBAcGFyYW0gVHJ1ZS9GYWxzZSAkcXVhdGF0aW9uDQoJICogQHJldHVybiByZXNwb25zZQ0KCSAqLw0KCXB1YmxpYyBmdW5jdGlvbiBhZGRQcm9qZWN0KCAkcGFyYW1ldGVycywgJHF1YXRhdGlvbiA9IGZhbHNlICkgew0KDQoJCWZvcmVhY2ggKCAkcGFyYW1ldGVycyBhcyAkZmllbGQgPT4gJHZhbHVlICkNCgkJCWlmICgkdmFsdWUgPT0gJycpDQoJCQkJdW5zZXQoJHBhcmFtZXRlcnNbJGZpZWxkXSk7DQoNCgkJJGRhdGEgPSBhcnJheSgncHJvamVjdCcgPT4gJHBhcmFtZXRlcnMsIC8qJ3RyYWNrZXInID0+ICR0aGlzLT50cmFja2VyKi8pOw0KDQoJCWlmICgkcXVhdGF0aW9uKQ0KCQkJcmV0dXJuICR0aGlzLT5wb3N0KCdwcm9qZWN0cy9xdW90YXRpb24nLCAkZGF0YSwgJ2dldCcpOw0KDQoJCXJldHVybiAkdGhpcy0+cG9zdCgncHJvamVjdHMnLCAkcGFyYW1ldGVycyk7DQoJfQ0KDQoJcHVibGljIGZ1bmN0aW9uIGdldExvY2FsZXMoKXsNCg0KCQkkdGhpcy0+bG9jYWxlcyA9ICR0aGlzLT5yZXF1ZXN0KCJsb2NhbGVzIiwgdHJ1ZSk7DQoJCXJldHVybiAkdGhpcy0+bG9jYWxlczsNCgl9DQoNCgkvKioNCgkgKiBVcGRhdGUgUHJvamVjdCBPbiBUZXh0TWFzdGVyDQoJICoNCgkgKiBAcGFyYW0gQXJyYXkgJHBhcmFtZXRlcnMNCgkgKiBAcmV0dXJuIHJlc3BvbnNlDQoJICovDQoJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZVByb2plY3QoJHBhcmFtZXRlcnMpew0KCQkkZGF0YSA9IGFycmF5KCdwcm9qZWN0JyA9PiAkcGFyYW1ldGVycywNCgkJCQkJICAvKid0cmFja2VyJyA9PiAkdGhpcy0+dHJhY2tlciovKTsNCg0KCQlyZXR1cm4gJHRoaXMtPnBvc3QoInByb2plY3RzL3skcGFyYW1ldGVyc1snaWQnXX0iLCAkZGF0YSwgJ3B1dCcpOw0KCX0NCg0KCS8qKg0KCSAqIExhbmNoIFByb2plY3QgT24gVGV4dE1hc3Rlcg0KCSAqDQoJICogQHBhcmFtIElELyAkaWRfcHJvamVjdF9hcGkNCgkgKiBAcmV0dXJuIHJlc3BvbnNlDQoJICovDQoJcHVibGljIGZ1bmN0aW9uIGxhdW5jaFByb2plY3QoJGlkX3Byb2plY3RfYXBpKXsNCgkJcmV0dXJuICR0aGlzLT5wb3N0KCJwcm9qZWN0cy8kaWRfcHJvamVjdF9hcGkvbGF1bmNoIiwgbnVsbCwgJ3B1dCcpOw0KCX0NCg0KCS8qKg0KCSAqIERlbGV0ZSBQcm9qZWN0IE9uIFRleHRNYXN0ZXINCgkgKg0KCSAqIEBwYXJhbSB1bmtub3duX3R5cGUgJGlkX3Byb2plY3RfYXBpDQoJICogQHJldHVybiB1bmtub3duDQoJICovDQoJcHVibGljIGZ1bmN0aW9uIGRlbGV0ZVByb2plY3QoJGlkX3Byb2plY3RfYXBpKXsNCgkJcmV0dXJuICR0aGlzLT5wb3N0KCJwcm9qZWN0cy8kaWRfcHJvamVjdF9hcGkvY2FuY2VsIiwgbnVsbCwgJ3B1dCcpOw0KCX0NCg0KCS8qKg0KCSAqIENyZWF0ZSBEb2N1bWVudCBvbiBUZXh0TWFzdGVyDQoJICoNCgkgKiBAcGFyYW0gdW5rbm93bl90eXBlICRpZF9wcm9qZWN0X2FwaQ0KCSAqIEBwYXJhbSB1bmtub3duX3R5cGUgJHBhcmFtZXRlcnMNCgkgKiBAcmV0dXJuIHVua25vd24NCgkgKi8NCglwdWJsaWMgZnVuY3Rpb24gYWRkRG9jdW1lbnQoJGlkX3Byb2plY3RfYXBpLCAkcGFyYW1ldGVycyl7DQoNCgkJJGRhdGEgPSBhcnJheSgnZG9jdW1lbnQnID0+ICRwYXJhbWV0ZXJzKTsNCgkJcmV0dXJuICR0aGlzLT5wb3N0KCJwcm9qZWN0cy8kaWRfcHJvamVjdF9hcGkvZG9jdW1lbnRzIiwgJGRhdGEpOw0KCX0NCg0KCS8qKg0KCSAqIFVwZGF0ZSBEb2N1bWVudCBPbiBUZXh0IE1hc3Rlcg0KCSAqDQoJICogQHBhcmFtIHVua25vd25fdHlwZSAkaWRfcHJvamVjdF9hcGkNCgkgKiBAcGFyYW0gdW5rbm93bl90eXBlICRwYXJhbWV0ZXJzDQoJICogQHJldHVybiB1bmtub3duDQoJICovDQoJcHVibGljIGZ1bmN0aW9uIHVwZGF0ZURvY3VtZW50KCRpZF9wcm9qZWN0X2FwaSwgJHBhcmFtZXRlcnMpew0KCQkkZGF0YSA9IGFycmF5KCdkb2N1bWVudCcgPT4gJHBhcmFtZXRlcnMpOw0KCQlyZXR1cm4gJHRoaXMtPnBvc3QoInByb2plY3RzLyRpZF9wcm9qZWN0X2FwaS9kb2N1bWVudHMveyRwYXJhbWV0ZXJzWydpZCddfSIsICRkYXRhLCAncHV0Jyk7DQoJfQ0KDQoJLyoqDQoJICogRGVsZXRlIERvY3VtZW50IE9uIFRleHQgTWFzdGVyDQoJICoNCgkgKiBAcGFyYW0gdW5rbm93bl90eXBlICRpZF9wcm9qZWN0X2FwaQ0KCSAqIEBwYXJhbSB1bmtub3duX3R5cGUgJGlkX2RvY3VtZW50X2FwaQ0KCSAqIEBwYXJhbSB1bmtub3duX3R5cGUgJHBhcmFtZXRlcnMNCgkgKiBAcmV0dXJuIHVua25vd24NCgkgKi8NCglwdWJsaWMgZnVuY3Rpb24gZGVsZXRlRG9jdW1lbnQoJGlkX3Byb2plY3RfYXBpLCAkaWRfZG9jdW1lbnRfYXBpKXsNCgkJcmV0dXJuICR0aGlzLT5wb3N0KCJwcm9qZWN0cy8kaWRfcHJvamVjdF9hcGkvZG9jdW1lbnRzLyRpZF9kb2N1bWVudF9hcGkiLCBudWxsLCAnZGVsZXRlJyk7DQoJfQ0KDQoJLyoqDQoJICogQXBwcm92ZWQgRG9jdW1lbnQNCgkgKg0KCSAqIEBwYXJhbSB1bmtub3duX3R5cGUgJGlkX3Byb2plY3RfYXBpDQoJICogQHBhcmFtIHVua25vd25fdHlwZSAkaWRfZG9jdW1lbnRfYXBpDQoJICogQHJldHVybiB1bmtub3duDQoJICovDQoJcHVibGljIGZ1bmN0aW9uIGFwcHJvdmVEb2N1bWVudCgkaWRfcHJvamVjdF9hcGksICRpZF9kb2N1bWVudF9hcGkpew0KCQlyZXR1cm4gJHRoaXMtPnBvc3QoInByb2plY3RzLyRpZF9wcm9qZWN0X2FwaS9kb2N1bWVudHMvJGlkX2RvY3VtZW50X2FwaS9jb21wbGV0ZSIsIG51bGwsICdwdXQnKTsNCgl9DQoNCglwdWJsaWMgZnVuY3Rpb24gY29tbWVudERvY3VtZW50KCRpZF9wcm9qZWN0X2FwaSwgJGlkX2RvY3VtZW50X2FwaSwgJG1lc3NhZ2Upew0KCQlyZXR1cm4gJHRoaXMtPnBvc3QoInByb2plY3RzLyRpZF9wcm9qZWN0X2FwaS9kb2N1bWVudHMvJGlkX2RvY3VtZW50X2FwaS9zdXBwb3J0X21lc3NhZ2VzIiwgYXJyYXkoJ3N1cHBvcnRfbWVzc2FnZScgPT4gYXJyYXkoJ21lc3NhZ2UnID0+ICRtZXNzYWdlKSksICdwb3N0Jyk7DQoJfQ0KDQoJLyoqDQoJICogR2V0IENyZWF0ZWQgUHJvamVjdHMgTGlzdCBUTyBUTQ0KCSAqDQoJICogQHBhcmFtIHVua25vd25fdHlwZSAkdHlwZQ0KCSAqIEBwYXJhbSB1bmtub3duX3R5cGUgJGZpbHRlcg0KCSAqIEByZXR1cm4gdW5rbm93bg0KCSAqLw0KCXB1YmxpYyBmdW5jdGlvbiBnZXRQcm9qZWN0cygkdHlwZSwgJGZpbHRlciA9IGFycmF5KCkpew0KCQkkYWxsX3Byb2plY3RzID0gJHRoaXMtPnJlcXVlc3QoJ3Byb2plY3RzP3Blcl9wYWdlPTUwMDAnLCBmYWxzZSwgdHJ1ZSk7IC8vIGFsbCBwcm9qZWN0cyBkYXRhDQoNCgkJLy8kYWxsX3Byb2plY3RzWydwcm9qZWN0cyddID0gJHRoaXMtPm1vZHVsZV9pbnN0YW5jZS0+Z2V0UHJvamVjdHNMaXN0RGF0YUJ5VHlwZSgkdHlwZSk7DQoNCgkJLyogZGl2aWRlcyBhbGwgcHJvamVjdHMgaW50byBzcGVjaWZpYyBhcnJheXMgb2YgdHJhbnNsYXRpb24sIGNvcHl3cml0aW5nIGFuZCBwcm9vZnJlYWRpbmcgKi8NCg0KCQlmb3JlYWNoICgkYWxsX3Byb2plY3RzWydwcm9qZWN0cyddIGFzICRwcm9qZWN0KSB7DQoNCgkJCSRwcm9qZWN0c0RhdGEgPSAkdGhpcy0+eydwcm9qZWN0c18nLiRwcm9qZWN0WydjdHlwZSddfTsgLy8gY29weSBvZiBzcGVjaWZpYyBwcm9qZWN0cyBhcnJheQ0KCQkJJHByb2plY3RzRGF0YVtdID0gJHByb2plY3Q7IC8vIGFwcGVuZHMgcHJvamVjdCBkYXRhIGludG8gY29weSBvZiBzcGVjaWZpYyBwcm9qZWN0cyBhcnJheQ0KCQkJJHRoaXMtPnsncHJvamVjdHNfJy4kcHJvamVjdFsnY3R5cGUnXX0gPSAkcHJvamVjdHNEYXRhOyAvLyB1cGRhdGVkIGFycmF5IGlzIGFzc2lnbmVkIGJhY2sgdG8gb3JpZ2luYWwgc3BlY2lmaWMgcHJvamVjdHMgYXJyYXkNCgkJfQ0KDQoJCXJldHVybiAkdGhpcy0+eydwcm9qZWN0c18nLiR0eXBlfTsNCgl9DQoNCgkvKioNCgkgKiBHZXQgRG9jdW1lbnRzIExpc3QNCgkgKg0KCSAqIEBwYXJhbSB1bmtub3duX3R5cGUgJGlkX3Byb2plY3RfYXBpDQoJICogQHJldHVybiB1bmtub3duDQoJICovDQoJcHVibGljIGZ1bmN0aW9uIGdldERvY3VtZW50cygkaWRfcHJvamVjdF9hcGkpew0KCQlyZXR1cm4gJHRoaXMtPnJlcXVlc3QoInByb2plY3RzLyRpZF9wcm9qZWN0X2FwaS9kb2N1bWVudHM/cGVyX3BhZ2U9NTAwMCIsIGZhbHNlLCB0cnVlKTsNCgl9DQoNCgkvKioNCgkgKiBHZXQgRG9jdW1lbnQgRGF0YQ0KCSAqDQoJICogQHBhcmFtIHVua25vd25fdHlwZSAkaWRfcHJvamVjdF9hcGkNCgkgKiBAcGFyYW0gdW5rbm93bl90eXBlICRpZF9kb2N1bWVudF9hcGkNCgkgKiBAcmV0dXJuIHVua25vd24NCgkgKi8NCglwdWJsaWMgZnVuY3Rpb24gZ2V0RG9jdW1lbnQoJGlkX3Byb2plY3RfYXBpLCAkaWRfZG9jdW1lbnRfYXBpKXsNCgkJcmV0dXJuICR0aGlzLT5yZXF1ZXN0KCJwcm9qZWN0cy8kaWRfcHJvamVjdF9hcGkvZG9jdW1lbnRzLyRpZF9kb2N1bWVudF9hcGkiLCBmYWxzZSwgdHJ1ZSk7DQoJfQ0KDQoJLyoqDQoJICogR2V0IFByb2plYyBEZXRhaWxzDQoJICoNCgkgKiBAcGFyYW0gdW5rbm93bl90eXBlICRpZF9wcm9qZWN0X2FwaQ0KCSAqIEByZXR1cm4gdW5rbm93bg0KCSAqLw0KCXB1YmxpYyBmdW5jdGlvbiBnZXRQcm9qZWN0KCRpZF9wcm9qZWN0X2FwaSl7DQoJCXJldHVybiAkdGhpcy0+cmVxdWVzdCgicHJvamVjdHMvJGlkX3Byb2plY3RfYXBpIiwgZmFsc2UsIHRydWUpOw0KCX0NCg0KCS8qKg0KCSAqIEdldCBBdXRob3VyIERhdGENCgkgKg0KCSAqIEByZXR1cm4gdW5rbm93bg0KCSAqLw0KCXB1YmxpYyBmdW5jdGlvbiBnZXRBdXRob3JzKCl7DQoNCgkJJHRoaXMtPmF1dGhvcnMgPSAkdGhpcy0+cmVxdWVzdCgibXlfYXV0aG9ycyIsIGZhbHNlLCB0cnVlKTsNCgkJcmV0dXJuICR0aGlzLT5hdXRob3JzOw0KCX0NCg0KCS8qKg0KCSAqIEdldCBMYW5ndWFnZXMNCgkgKg0KCSAqIEByZXR1cm4gdW5rbm93bg0KCSAqLw0KCXB1YmxpYyBmdW5jdGlvbiBnZXRMYW5ndWFnZXMoKXsNCg0KCQkkdGhpcy0+bGFuZ3VhZ2VzID0gJHRoaXMtPnJlcXVlc3QoImxhbmd1YWdlcyIsIHRydWUpOw0KCQlyZXR1cm4gJHRoaXMtPmxhbmd1YWdlczsNCgl9DQp9IA==')); ?>